openapi: 3.0.3
info:
  version: v1
  title: Solarpunk Drifters API
servers:
  - url: http://localhost:3000/api
    description: Local dev server (with local reverse proxy)
  - url: https://solarpunkdrifters.bond/api
    description: Production server (uses live data)
paths:
  /game-state:
    get:
      description: Get the current game state for a player
      responses:
        '200':
          description: The game state
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GameState'
  /drifter-cards/{drifter_card_id}:
    get:
      description: Get data for a single Drifter Card
      parameters:
        - name: drifter_card_id
          in: path
          required: true
          schema:
            type: string
            description: The Drifter Card's ID
            example: 'make-progress-123'
      responses:
        '200':
          description: A single Drifter Card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DrifterCard'
        '404':
          description: Drifter Card with the given ID does not exist
  /encounter-cards/{encounter_card_id}:
    get:
      description: Get data for a single Encounter Card
      parameters:
        - name: encounter_card_id
          in: path
          required: true
          schema:
            type: string
            description: The Encounter Card's ID
            example: 'buffalo-demo-123456'
      responses:
        '200':
          description: A single Encounter Card
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EncounterCard'
        '404':
          description: Encounter Card with the given ID does not exist
  /expeditions/begin-expedition:
    post:
      description: Begin an expedition
      responses:
        '200':
          description: Successfully began expedition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpeditionUpdate'
  /expeditions/next-encounter:
    post:
      description: Begin next encounter (draw a new encounter card)
      responses:
        '200':
          description: Successfully began new encounter.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpeditionUpdate'
  /expeditions/turn-back:
    post:
      description: Turn back, ending the expedition.
      responses:
        '200':
          description: Successfully ended the expedition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpeditionUpdate'
  /expeditions/encounter-card-choice:
    post:
      description: Make a choice on the active encounter card
      requestBody:
        description: A player choice for the active encounter card
        content:
          application/json:
            schema:
              type: object
              properties:
                choice:
                  type: integer
                  minimum: 0
      responses:
        '200':
          description: Successfully executed a choice.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpeditionUpdate'
  /expeditions/play-drifter-card:
    post:
      description: Play a Drifter Card in the player's hand (between encounters)
      requestBody:
        description: A request to play a Drifter Card
        content:
          application/json:
            schema:
              type: object
              properties:
                drifterCardId:
                  type: string
      responses:
        '200':
          description: Successfully played a Drifter Card.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExpeditionUpdate'
  /login/user:
    post:
      description: Create a new user
      security: []
      requestBody:
        description: A username and password
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserLogin'
      responses:
        '201':
          description: Successfully created a new user.
        '400':
          description: Error. User already exists
        '401':
          description: Error. Incorrect parameters.
  /login/login:
    post:
      description: Log in an existing user account
      security: []
      requestBody:
        $ref: '#/paths/~1login~1user/post/requestBody'
      responses:
        '200':
          description: Successful login, obtain a session cookie to be used in subsequent requests
          headers:
            Set-Cookie:
              schema:
                type: string
                example: connect.sid=abcde12345; Path=/; HttpOnly; SameSite=Lax
        '401':
          description: Invalid username or password

security:
  - sessionCookieAuth: []

components:
  securitySchemes:
    sessionCookieAuth:
      type: apiKey
      in: cookie
      name: connect.sid
  schemas:
    CharacterStats:
      type: object
      properties:
        agility:
          $ref: '#/components/schemas/StatNumber'
        diy:
          $ref: '#/components/schemas/StatNumber'
        harmony:
          $ref: '#/components/schemas/StatNumber'
        luck:
          $ref: '#/components/schemas/StatNumber'
      required: [agility, diy, harmony, luck]

    ClientEvent:
      description: Describes an event that happened in the game, relevant to the client
      oneOf:
        - $ref: '#/components/schemas/ClientEventEncounterResult'
    ClientEventEncounterResult:
      type: object
      properties:
        type:
          type: string
          enum: ['CLIENT_EVENT_ENCOUNTER_RESULT']
        payload:
          $ref: '#/components/schemas/EncounterResult'
      required: [type, payload]

    DrifterCard:
      type: object
      properties:
        id:
          type: string
          example: make-progress-123
        title:
          type: string
          example: Make Progress
        description:
          type: string
          example: Progress 200 km toward your destination. Costs 1 ration.
        image:
          $ref: '#/components/schemas/ImageInfo'
      required: [id, title, description, image]

    EncounterCard:
      type: object
      properties:
        id:
          type: string
          example: some-id-123-blah
        title:
          type: string
          example: Buffalo Migration
        description:
          type: string
          example: You come across a migrating herd of buffalo. Their ranks stretch back to the horizon.
        image:
          $ref: '#/components/schemas/ImageInfo'
        choices:
          type: array
          items:
            $ref: '#/components/schemas/EncounterChoice'
      required: [id, title, description, image, choices]

    EncounterChoice:
      type: object
      properties:
        description:
          type: string
        check:
          $ref: '#/components/schemas/EncounterCheck'
        risk:
          $ref: '#/components/schemas/EncounterRisk'
      required: [description]

    EncounterCheck:
      type: object
      properties:
        skill:
          $ref: '#/components/schemas/Skill'
        items:
          type: object
          additionalProperties:
            type: integer

    EncounterRisk:
      type: object
      properties:
        loseItem:
          type: string
          nullable: true
        loseResource:
          type: string
          nullable: true
        loomingDangerIncrease:
          type: number
          nullable: true

    ExpeditionProgress:
      type: object
      properties:
        current:
          type: number
        total:
          type: number
      required: [current, total]

    ExpeditionUpdate:
      description: >-
        A list of client events, and a game "update" in JSON Patch (RFC 6902) format,
        representing a sequence of operations to apply to the GameState
      type: object
      properties:
        clientEvents:
          description: A list of game events relevant to the client
          type: array
          items:
            $ref: '#/components/schemas/ClientEvent'
        update:
          $ref: '#/components/schemas/PatchRequest'

    # GameMode:
    #   type: string
    #   enum: [ACTIVE_ENCOUNTER, BETWEEN_ENCOUNTERS, LOADOUT]
    CoreGameState:
      type: object
      properties:
        characterStats:
          $ref: '#/components/schemas/CharacterStats'
        drifterCardInventory:
          type: object
          additionalProperties:
            type: integer
        inventory:
          type: object
          additionalProperties:
            type: integer
        resources:
          type: object
          additionalProperties:
            type: integer
    ActiveEncounterGameState:
      type: object
      properties:
        gameMode:
          type: string
          enum: ['ACTIVE_ENCOUNTER']
        activeEncounterCardId:
          type: string
        expeditionProgress:
          $ref: '#/components/schemas/ExpeditionProgress'
    BetweenEncountersGameState:
      type: object
      properties:
        gameMode:
          type: string
          enum: ['BETWEEN_ENCOUNTERS']
        expeditionProgress:
          $ref: '#/components/schemas/ExpeditionProgress'
    LoadoutGameState:
      type: object
      properties:
        gameMode:
          type: string
          enum: ['LOADOUT']
    GameState:
      allOf:
        - $ref: '#/components/schemas/CoreGameState'
        - oneOf:
            - $ref: '#/components/schemas/ActiveEncounterGameState'
            - $ref: '#/components/schemas/BetweenEncountersGameState'
            - $ref: '#/components/schemas/LoadoutGameState'
          discriminator:
            propertyName: gameMode

    ImageInfo:
      type: object
      properties:
        alt:
          type: string
        height:
          type: integer
        width:
          type: integer
        src:
          type: string
      required: [alt, height, width, src]

    EncounterResult:
      description: The result of a an encounter card choice player move
      type: object
      properties:
        skillCheckRoll:
          $ref: '#/components/schemas/SkillCheckRoll'
        outcome:
          $ref: '#/components/schemas/EncounterOutcome'
      required: [outcome]
    EncounterOutcome:
      description: The outcome of the Encounter (failure / mixed success / strong success)
      type: string
      enum:
        - 'ENCOUNTER_OUTCOME_FAILURE'
        - 'ENCOUNTER_OUTCOME_MIXED_SUCCESS'
        - 'ENCOUNTER_OUTCOME_STRONG_SUCCESS'
    SkillCheckRoll:
      type: object
      description: The result of a skill check dice roll
      properties:
        rolls:
          description: The number of each die roll
          type: array
          items:
            type: integer
        disadvantage:
          type: boolean
          description: If true, the roll was "with disadvantage" (must choose the lowest die)
      required: [disadvantage, rolls]

    Skill:
      type: string
      enum: [agility, diy, harmony, luck]

    StatNumber:
      type: integer

    UserLogin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required: [username, password]

    # JSON Patch (RFC 6902)
    # Thanks to Jamie Tanna for the OpenAPI schema
    # https://www.jvt.me/posts/2022/05/29/openapi-json-patch/
    PatchRequest:
      type: array
      items:
        oneOf:
          - $ref: '#/components/schemas/JSONPatchRequestAddReplaceTest'
          - $ref: '#/components/schemas/JSONPatchRequestRemove'
          - $ref: '#/components/schemas/JSONPatchRequestMoveCopy'
    JSONPatchRequestAddReplaceTest:
      type: object
      additionalProperties: false
      required:
        - value
        - op
        - path
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        value:
          description: The value to add, replace or test.
        op:
          description: The operation to perform.
          type: string
          enum:
            - add
            - replace
            - test
    JSONPatchRequestRemove:
      type: object
      additionalProperties: false
      required:
        - op
        - path
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          type: string
          enum:
            - remove
    JSONPatchRequestMoveCopy:
      type: object
      additionalProperties: false
      required:
        - from
        - op
        - path
      properties:
        path:
          description: A JSON Pointer path.
          type: string
        op:
          description: The operation to perform.
          type: string
          enum:
            - move
            - copy
        from:
          description: A JSON Pointer path.
          type: string
