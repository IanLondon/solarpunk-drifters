name: Monorepo test build and deploy

on:
  push:
    branches: [main]
    paths:
      - api-server/**
      - common/**
      - website/**
      - package*.json
  pull_request:
    branches: [main]
    paths:
      - api-server/**
      - common/**
      - website/**
      - package*.json
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

jobs:
  changed-files:
    name: Get changed files
    outputs:
      api-server: ${{ steps.changed-files.outputs.api-server_any_modified == 'true' }}
      common: ${{ steps.changed-files.outputs.common_any_modified == 'true' }}
      website: ${{ steps.changed-files.outputs.website_any_modified == 'true' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Get relevant files changed per group
        id: changed-files
        uses: tj-actions/changed-files@ae82ed4ae04587b665efad2f206578aa6f0e8539
        with:
          files_yaml: |
            common: &common
              - common/**
            api-server:
              - api-server/**
              - *common
            website:
              - website/**
              - *common

  install-check-lint-test-build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Use Node.js 20
        uses: actions/setup-node@v3
        with:
          node-version: 20
          cache: "npm"
      - run: npm ci
      # NOTE: building at least common/ is necessary for the tests
      - run: npm run build
      - run: npm run check
      - run: npm run lint
      - run: npm run test
      # TODO: run db integration tests
      # - run: npm run test-db-integration
      #   working-directory: ./api-server
      #   changed-files: ./api-server
      #
      - name: upload website artifact
        uses: actions/upload-artifact@v4
        with:
          name: website-dist
          path: ./website/dist
          if-no-files-found: error
          # TODO: set repository-level default?
          retention-days: 1
      - name: upload api-server artifact
        uses: actions/upload-artifact@v4
        with:
          name: api-server-dist
          path: api-server/dist
          # TODO: set repository-level default?
          retention-days: 1

  deploy-website:
    needs: [install-check-lint-test-build, changed-files]
    if: ${{ github.ref == 'refs/heads/main' && needs.changed-files.outputs.website == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: download website artifact
        uses: actions/download-artifact@v4
        with:
          name: website-dist
          path: website/dist
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_GH_OIDC_ROLE }}
          role-session-name: deploy-testing-website
          aws-region: ${{ vars.AWS_REGION }}
      - name: deploy website to testing bucket
        run: ./infrastructure/deploy-website-to-testing-bucket.sh ${{ vars.MAIN_STACK_NAME }}
      # TODO: create CloudFront invalidation for all changed files.

  push-api-server:
    needs: [install-check-lint-test-build, changed-files]
    if: ${{ github.ref == 'refs/heads/main' && needs.changed-files.outputs.api-server == 'true'}}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: download api-server artifact
        uses: actions/download-artifact@v4
        with:
          name: api-server-dist
          path: api-server/dist
      - name: configure aws credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          role-to-assume: ${{ vars.AWS_GH_OIDC_ROLE }}
          role-session-name: push-api-server-container
          aws-region: ${{ vars.AWS_REGION }}
      - name: login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2
      - name: Get ECR repository URL
        run: |
          echo "REPOSITORY=$(\
            ./infrastructure/get-ecr-repo-name.sh ${{ vars.MAIN_STACK_NAME }})" \
          >> "$GITHUB_ENV"
      - name: Build, tag, and push docker image to Amazon ECR
        id: build-and-push
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build . -t $REGISTRY/$REPOSITORY:$IMAGE_TAG -f ./api-server/Dockerfile
          docker push $REGISTRY/$REPOSITORY:$IMAGE_TAG
          echo "image-tag=$IMAGE_TAG" >> "$GITHUB_OUTPUT"
    outputs:
      image-tag: ${{ steps.build-and-push.outputs.image-tag }}

  stage-server-image:
    needs: [push-api-server]
    runs-on: ubuntu-latest
    concurrency:
      group: cloudformation-update
      cancel-in-progress: true
    steps:
      - name: Update latent environment's ECS to use new image
        run: |
          ./infrastructure/stage-api-server-image.sh \
              ${{ vars.MAIN_STACK_NAME }} \
              ${{ needs.push-api-server.outputs.image-tag }}
