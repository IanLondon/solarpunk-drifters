AWSTemplateFormatVersion: "2010-09-09"
Description: Solarpunk Drifters - Main CFN Stack

Parameters:
  DomainName:
    Description: Domain name (must be registered on Route53 before deploying this stack)
    Type: String
  HostedZoneId:
    Description: HostedZoneId for the domain e.g. Z23ABC4XYZL05B
    Type: String
  ContainerImageUrlA:
    Type: String
    Description: |
      The url of a container image for the ECS tasks to run (in environment "A"), eg 
      "012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:someSha"
  ContainerImageUrlB:
    Type: String
    Description: |
      The url of a container image for the ECS tasks to run (in environment "B"), eg 
      "012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:someSha"
  ProdEnvLetter:
    Type: String
    Description: |
      Which env is the production one? 
      Set to either A or B to designate production, the other will implicitly be test
    AllowedValues: [A, B]

Conditions:
  AIsProd: !Equals
    - !Ref ProdEnvLetter
    - A
  # BIsProd: !Equals
  #   - !Ref ProdEnvLetter
  #   - B

Mappings:
  Constants:
    EnvironmentPrefixes:
      A: a
      B: b
    LogGroupNames:
      ApiServiceA: solarpunk-drifters/env-a/api-service
      ApiServiceB: solarpunk-drifters/env-b/api-service
    Subdomains:
      Test: testing

Resources:
  # TODO: once stabilized, write more conservative delete/replace policies

  AcmCertificateStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./acm-certificate.yaml
      Parameters:
        DomainName: !Ref DomainName
        TestingSubdomainDomainName: !Sub
          - "${TestingSubdomain}.${DomainName}"
          - TestingSubdomain: !FindInMap [Constants, Subdomains, Test]
        HostedZoneId: !Ref HostedZoneId

  DnsStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./dns.yaml
      Parameters:
        DomainName: !Ref DomainName
        ProdCloudFrontDistroDomainName: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionDomain
        TestCloudFrontDistroDomainName: !GetAtt TestCdn.Outputs.CloudFrontDistributionDomain
        TestSubdomain: !FindInMap [Constants, Subdomains, Test]

  NetworkStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./network.yaml

  # === CDN with CloudFront ===========================================

  ProductionCdn:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./cdn.yaml
      Parameters:
        # Prod CDN always uses apex
        CertificateArn: !GetAtt AcmCertificateStack.Outputs.ApexCertificateArn
        CloudFrontDistroCname: !Ref DomainName
        EnvironmentPrefix: prod # TODO don't call this "Environment" prefix, CDN prefix??

        ApiLoadBalancerDnsName: !If
          - AIsProd
          - !GetAtt ApiServerStackA.Outputs.ApiLoadBalancerDnsName
          - !GetAtt ApiServerStackB.Outputs.ApiLoadBalancerDnsName
        StaticWebsiteS3BucketRootName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
        StaticWebsiteS3BucketRootArn: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
        StaticWebsiteS3BucketLogsDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketLogsDomainName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketLogsDomainName
        StaticWebsiteS3BucketRootDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootDomainName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootDomainName

  TestCdn:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./cdn.yaml
      Parameters:
        CertificateArn: !GetAtt AcmCertificateStack.Outputs.TestingSubdomainCertificateArn
        EnvironmentPrefix: test # TODO don't call this "Environment" prefix, CDN prefix??
        # Test CDN always uses testing subdomain
        CloudFrontDistroCname: !Sub
          - "${TestingSubdomain}.${DomainName}"
          - TestingSubdomain: !FindInMap [Constants, Subdomains, Test]

        ApiLoadBalancerDnsName: !If
          - AIsProd
          - !GetAtt ApiServerStackB.Outputs.ApiLoadBalancerDnsName
          - !GetAtt ApiServerStackA.Outputs.ApiLoadBalancerDnsName
        StaticWebsiteS3BucketRootName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
        StaticWebsiteS3BucketRootArn: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
        StaticWebsiteS3BucketLogsDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketLogsDomainName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketLogsDomainName
        StaticWebsiteS3BucketRootDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootDomainName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootDomainName

  # TODO: can a ForEach make this more DRY?
  # === STACK A =======================================================
  ApiServerStackA:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./api-server.yaml
      Parameters:
        ApiServiceLogGroupName:
          !FindInMap [Constants, LogGroupNames, ApiServiceA]
        ContainerImageUrl: !Ref ContainerImageUrlA
        EnvironmentPrefix: !FindInMap [Constants, EnvironmentPrefixes, A]
        PublicSubnet1Id: !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        PublicSubnet2Id: !GetAtt NetworkStack.Outputs.PublicSubnet2Id
        PrivateSubnet1Id: !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        VpcId: !GetAtt NetworkStack.Outputs.VpcId

  WebsiteStackA:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./website.yaml

  # === STACK B =======================================================
  ApiServerStackB:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./api-server.yaml
      Parameters:
        ApiServiceLogGroupName:
          !FindInMap [Constants, LogGroupNames, ApiServiceB]
        ContainerImageUrl: !Ref ContainerImageUrlB
        EnvironmentPrefix: !FindInMap [Constants, EnvironmentPrefixes, B]
        PublicSubnet1Id: !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        PublicSubnet2Id: !GetAtt NetworkStack.Outputs.PublicSubnet2Id
        PrivateSubnet1Id: !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        VpcId: !GetAtt NetworkStack.Outputs.VpcId

  WebsiteStackB:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./website.yaml

Outputs:
  TestCloudFrontDistributionId:
    Description: The ID of the CloudFront distribution of this stack (test environment)
    Value: !GetAtt TestCdn.Outputs.CloudFrontDistributionId
  TestCloudFrontDistributionDomain:
    Description: The domain of the CloudFront distribution of this stack (test environment)
    Value: !GetAtt TestCdn.Outputs.CloudFrontDistributionDomain
  TestStaticWebsiteS3BucketRootName:
    Description: Static website S3 bucket name (test environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
  TestStaticWebsiteS3BucketRootArn:
    Description: Website bucket locator (test environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
  TestApiServiceLogGroupArn:
    Description: Log group of API service task (test environment)
    Value: !If
      - AIsProd
      - !GetAtt ApiServerStackB.Outputs.ApiServiceLogGroupArn
      - !GetAtt ApiServerStackA.Outputs.ApiServiceLogGroupArn

  ProdCloudFrontDistributionId:
    Description: The ID of the CloudFront distribution of this stack (prod environment)
    Value: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionId
  ProdCloudFrontDistributionDomain:
    Description: The domain of the CloudFront distribution of this stack (prod environment)
    Value: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionDomain
  ProdStaticWebsiteS3BucketRootName:
    Description: Static website S3 bucket name (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
  ProdStaticWebsiteS3BucketRootArn:
    Description: Website bucket locator (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
  ProdApiServiceLogGroupArn:
    Description: Log group of API service task (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt ApiServerStackA.Outputs.ApiServiceLogGroupArn
      - !GetAtt ApiServerStackB.Outputs.ApiServiceLogGroupArn
