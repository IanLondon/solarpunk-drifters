AWSTemplateFormatVersion: "2010-09-09"
Description: Solarpunk Drifters - Main CFN Stack

Parameters:
  # ====== Required ======
  DomainName:
    Description: Domain name (must be registered on Route53 before deploying this stack)
    Type: String
  GitHubOrg:
    Description: GitHub organization to give OIDC role to
    Type: String
    AllowedPattern: "^[a-zA-Z0-9\\-]*$"
  GitHubRepo:
    Description: GitHub repo name to give OIDC role to
    Type: String
    AllowedPattern: "^[a-zA-Z0-9\\-]*$"
  HostedZoneId:
    Description: HostedZoneId for the domain e.g. Z23ABC4XYZL05B
    Type: String
  ContainerImageUrlA:
    Type: String
    Description: |
      The url of a container image for the ECS tasks to run (in environment "A"), eg 
      "012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:someSha"
  ContainerImageUrlB:
    Type: String
    Description: |
      The url of a container image for the ECS tasks to run (in environment "B"), eg 
      "012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:someSha"
  ProdEnvLetter:
    Type: String
    Description: |
      Which env is the production one? 
      Set to either A or B to designate production, the other will implicitly be test
    AllowedValues: [A, B]
  # ====== Optional ======
  OIDCProviderArn:
    Description: |
      ARN for the GitHub OIDC Provider (if one exists).
      If not set, the GitHubOidxStack will create a GitHub OIDC Provider.
      (You only need one GitHub OIDC provider per AWS account.)
    Default: ""
    Type: String

Conditions:
  AIsProd: !Equals
    - !Ref ProdEnvLetter
    - A
  # BIsProd: !Equals
  #   - !Ref ProdEnvLetter
  #   - B

Mappings:
  Constants:
    EnvironmentPrefixes:
      A: a
      B: b
    LogGroupNames:
      ApiServiceA: solarpunk-drifters/env-a/api-service
      ApiServiceB: solarpunk-drifters/env-b/api-service
    Subdomains:
      Test: testing
      LoadBalancerA: lb-a
      LoadBalancerB: lb-b

Resources:
  # TODO: once stabilized, write more conservative delete/replace policies

  AcmCertificateStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./acm-certificate.yaml
      Parameters:
        DomainName: !Ref DomainName
        AlternativeNames: !Join
          - ","
          - - !Sub "*.${DomainName}"
        HostedZoneId: !Ref HostedZoneId

  LoadBalancerRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Sub
            - "${LoadBalancerSubdomain}.${DomainName}"
            - LoadBalancerSubdomain:
                !FindInMap [Constants, Subdomains, LoadBalancerA]
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt ApiServerStackA.Outputs.ApiLoadBalancerDnsName
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt ApiServerStackA.Outputs.LoadBalancerCanonicalHostedZoneID
        - Name: !Sub
            - "${LoadBalancerSubdomain}.${DomainName}"
            - LoadBalancerSubdomain:
                !FindInMap [Constants, Subdomains, LoadBalancerB]
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt ApiServerStackB.Outputs.ApiLoadBalancerDnsName
            EvaluateTargetHealth: false
            HostedZoneId: !GetAtt ApiServerStackB.Outputs.LoadBalancerCanonicalHostedZoneID

  CloudFrontRecordSetGroup:
    Type: AWS::Route53::RecordSetGroup
    Properties:
      HostedZoneName: !Sub "${DomainName}."
      RecordSets:
        - Name: !Ref DomainName
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionDomain
            EvaluateTargetHealth: false
            # The following HostedZoneId is always used for alias records pointing to CloudFront.
            HostedZoneId: "Z2FDTNDATAQYW2"
        - Name: !Sub
            - "${TestSubdomain}.${DomainName}"
            - TestSubdomain: !FindInMap [Constants, Subdomains, Test]
          Type: "A"
          AliasTarget:
            DNSName: !GetAtt TestCdn.Outputs.CloudFrontDistributionDomain
            EvaluateTargetHealth: false
            # The following HostedZoneId is always used for alias records pointing to CloudFront.
            HostedZoneId: "Z2FDTNDATAQYW2"

  NetworkStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./network.yaml

  GitHubOidcStack:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./github-oidc.yaml
      Parameters:
        GitHubRepo: !Ref GitHubRepo
        GitHubOrg: !Ref GitHubOrg
        MainStackArn: !Ref AWS::StackId
        ApiServiceALogGroupArn: !GetAtt ApiServerStackA.Outputs.ApiServiceLogGroupArn
        ApiServiceBLogGroupArn: !GetAtt ApiServerStackB.Outputs.ApiServiceLogGroupArn
        EcsServiceA: !GetAtt ApiServerStackA.Outputs.EcsServiceArn
        EcsServiceB: !GetAtt ApiServerStackB.Outputs.EcsServiceArn
        EcsTaskExecutionRoleArnA: !GetAtt ApiServerStackA.Outputs.EcsTaskExecutionRoleArn
        EcsTaskExecutionRoleArnB: !GetAtt ApiServerStackB.Outputs.EcsTaskExecutionRoleArn
        PostgresKeyArn: !GetAtt PostgresKMSKey.Arn
        PostgresArn: !GetAtt Postgres.DBInstanceArn
        OIDCProviderArn: !Ref OIDCProviderArn

  ApiServerContainerRepo:
    Type: AWS::ECR::Repository
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      EmptyOnDelete: true
      ImageTagMutability: IMMUTABLE
      RepositoryName: !Sub "${AWS::StackName}/api-server"
      RepositoryPolicyText:
        Version: "2012-10-17"
        Statement:
          - Sid: GitHubOIDCAllowPushPull
            Effect: Allow
            Principal:
              AWS: !GetAtt GitHubOidcStack.Outputs.GitHubOIDCRoleArn
            Action:
              - ecr:BatchCheckLayerAvailability
              - ecr:BatchGetImage
              - ecr:CompleteLayerUpload
              - ecr:DescribeImages
              - ecr:DescribeRepositories
              - ecr:GetDownloadUrlForLayer
              - ecr:GetLifecyclePolicy
              - ecr:GetRepositoryPolicy
              - ecr:InitiateLayerUpload
              - ecr:ListImages
              - ecr:ListTagsForResource
              - ecr:PutImage
              - ecr:UploadLayerPart

  # TODO: factor out into nested stack
  Postgres:
    Type: AWS::RDS::DBInstance
    DeletionPolicy: Snapshot
    UpdateReplacePolicy: Snapshot
    Properties:
      AllocatedStorage: "20" # Minimum is 20GiB for SSD
      BackupRetentionPeriod: 0 # TODO: set to number of days to enable automatic backups
      DBInstanceClass: db.t4g.micro
      DBSubnetGroupName: !Ref PostgresDBSubnetGroup
      Engine: postgres
      ManageMasterUserPassword: true
      MasterUsername: postgres # TODO
      MasterUserSecret:
        KmsKeyId: !Ref PostgresKMSKey
      VPCSecurityGroups:
        - !Ref PostgresSecurityGroup
  PostgresKMSKey:
    Type: AWS::KMS::Key
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      Description: MasterUserSecret for Postgres
      KeyPolicy:
        Version: 2012-10-17
        Id: !Sub "${AWS::StackName}-pg-key"
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Sub "arn:${AWS::Partition}:iam::${AWS::AccountId}:root"
            Action:
              - "kms:*"
            Resource: "*"
  PostgresDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for Postgres DB
      SubnetIds:
        - !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        - !GetAtt NetworkStack.Outputs.PrivateSubnet2Id
  PostgresSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to Postgres DB
      VpcId: !GetAtt NetworkStack.Outputs.VpcId
  # TODO: factor out security groups from this and api.yaml
  # so we don't have complex dependencies
  PostgresIngressfromAPIServiceA:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from ECS service A security group
      FromPort: 5432
      GroupId: !Ref PostgresSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt ApiServerStackA.Outputs.ServiceSecurityGroup
      ToPort: 5432
  PostgresIngressfromAPIServiceB:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from ECS service B security group
      FromPort: 5432
      GroupId: !Ref PostgresSecurityGroup
      IpProtocol: tcp
      SourceSecurityGroupId: !GetAtt ApiServerStackB.Outputs.ServiceSecurityGroup
      ToPort: 5432

  SessionSecret:
    Type: AWS::SecretsManager::Secret
    DeletionPolicy: Retain
    UpdateReplacePolicy: Retain
    Properties:
      Description: API Server session secret
      GenerateSecretString:
        IncludeSpace: false
        PasswordLength: 32

  # === CDN with CloudFront ===========================================

  ProductionCdn:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./cdn.yaml
      Parameters:
        # Prod CDN always uses apex
        CloudFrontDistroCname: !Ref DomainName
        EnvironmentPrefix: prod # TODO don't call this "Environment" prefix, CDN prefix??

        CertificateArn: !GetAtt AcmCertificateStack.Outputs.CertificateArn
        GitHubOIDCRoleArn: !GetAtt GitHubOidcStack.Outputs.GitHubOIDCRoleArn
        ApiLoadBalancerDnsName: !If
          - AIsProd
          - !Sub
            - "${LoadBalancerSubdomain}.${DomainName}"
            - LoadBalancerSubdomain:
                !FindInMap [Constants, Subdomains, LoadBalancerA]
          - !Sub
            - "${LoadBalancerSubdomain}.${DomainName}"
            - LoadBalancerSubdomain:
                !FindInMap [Constants, Subdomains, LoadBalancerB]
        StaticWebsiteS3BucketRootName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
        StaticWebsiteS3BucketRootArn: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
        StaticWebsiteS3BucketLogsDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketLogsDomainName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketLogsDomainName
        StaticWebsiteS3BucketRootDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootDomainName
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootDomainName

  TestCdn:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./cdn.yaml
      Parameters:
        # Test CDN always uses testing subdomain
        CloudFrontDistroCname: !Sub
          - "${TestingSubdomain}.${DomainName}"
          - TestingSubdomain: !FindInMap [Constants, Subdomains, Test]
        EnvironmentPrefix: test # TODO don't call this "Environment" prefix, CDN prefix??

        CertificateArn: !GetAtt AcmCertificateStack.Outputs.CertificateArn
        GitHubOIDCRoleArn: !GetAtt GitHubOidcStack.Outputs.GitHubOIDCRoleArn
        ApiLoadBalancerDnsName: !If
          - AIsProd
          - !GetAtt ApiServerStackB.Outputs.ApiLoadBalancerDnsName
          - !GetAtt ApiServerStackA.Outputs.ApiLoadBalancerDnsName
        StaticWebsiteS3BucketRootName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
        StaticWebsiteS3BucketRootArn: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
        StaticWebsiteS3BucketLogsDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketLogsDomainName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketLogsDomainName
        StaticWebsiteS3BucketRootDomainName: !If
          - AIsProd
          - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootDomainName
          - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootDomainName

  # TODO: can a ForEach make this more DRY?
  # === STACK A =======================================================
  ApiServerStackA:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./api-server.yaml
      Parameters:
        ApiServiceLogGroupName:
          !FindInMap [Constants, LogGroupNames, ApiServiceA]
        CertificateArn: !GetAtt AcmCertificateStack.Outputs.CertificateArn
        DbEndpointAddress: !GetAtt Postgres.Endpoint.Address
        DbSecretArn: !GetAtt Postgres.MasterUserSecret.SecretArn
        DbSecretKmsArn: !GetAtt PostgresKMSKey.Arn
        ContainerImageUrl: !Ref ContainerImageUrlA
        EnvironmentPrefix: !FindInMap [Constants, EnvironmentPrefixes, A]
        PublicSubnet1Id: !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        PublicSubnet2Id: !GetAtt NetworkStack.Outputs.PublicSubnet2Id
        PrivateSubnet1Id: !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        SessionSecretArn: !Ref SessionSecret
        VpcId: !GetAtt NetworkStack.Outputs.VpcId

  WebsiteStackA:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./website.yaml

  # === STACK B =======================================================
  ApiServerStackB:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./api-server.yaml
      Parameters:
        ApiServiceLogGroupName:
          !FindInMap [Constants, LogGroupNames, ApiServiceB]
        CertificateArn: !GetAtt AcmCertificateStack.Outputs.CertificateArn
        DbEndpointAddress: !GetAtt Postgres.Endpoint.Address
        DbSecretArn: !GetAtt Postgres.MasterUserSecret.SecretArn
        DbSecretKmsArn: !GetAtt PostgresKMSKey.Arn
        ContainerImageUrl: !Ref ContainerImageUrlB
        EnvironmentPrefix: !FindInMap [Constants, EnvironmentPrefixes, B]
        PublicSubnet1Id: !GetAtt NetworkStack.Outputs.PublicSubnet1Id
        PublicSubnet2Id: !GetAtt NetworkStack.Outputs.PublicSubnet2Id
        PrivateSubnet1Id: !GetAtt NetworkStack.Outputs.PrivateSubnet1Id
        SessionSecretArn: !Ref SessionSecret
        VpcId: !GetAtt NetworkStack.Outputs.VpcId

  WebsiteStackB:
    Type: AWS::CloudFormation::Stack
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      TemplateURL: ./website.yaml

Outputs:
  TestCloudFrontDistributionId:
    Description: The ID of the CloudFront distribution of this stack (test environment)
    Value: !GetAtt TestCdn.Outputs.CloudFrontDistributionId
  TestCloudFrontDistributionDomain:
    Description: The domain of the CloudFront distribution of this stack (test environment)
    Value: !GetAtt TestCdn.Outputs.CloudFrontDistributionDomain
  TestStaticWebsiteS3BucketRootName:
    Description: Static website S3 bucket name (test environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
  TestStaticWebsiteS3BucketRootArn:
    Description: Website bucket ARN (test environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
  TestApiServiceLogGroupArn:
    Description: Log group of API service task (test environment)
    Value: !If
      - AIsProd
      - !GetAtt ApiServerStackB.Outputs.ApiServiceLogGroupArn
      - !GetAtt ApiServerStackA.Outputs.ApiServiceLogGroupArn

  ProdCloudFrontDistributionId:
    Description: The ID of the CloudFront distribution of this stack (prod environment)
    Value: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionId
  ProdCloudFrontDistributionDomain:
    Description: The domain of the CloudFront distribution of this stack (prod environment)
    Value: !GetAtt ProductionCdn.Outputs.CloudFrontDistributionDomain
  ProdStaticWebsiteS3BucketRootName:
    Description: Static website S3 bucket name (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootName
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootName
  ProdStaticWebsiteS3BucketRootArn:
    Description: Website bucket ARN (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt WebsiteStackA.Outputs.StaticWebsiteS3BucketRootArn
      - !GetAtt WebsiteStackB.Outputs.StaticWebsiteS3BucketRootArn
  ProdApiServiceLogGroupArn:
    Description: Log group of API service task (prod environment)
    Value: !If
      - AIsProd
      - !GetAtt ApiServerStackA.Outputs.ApiServiceLogGroupArn
      - !GetAtt ApiServerStackB.Outputs.ApiServiceLogGroupArn
  ApiServerContainerRepoUri:
    Description: URI of the ECR repo
    Value: !GetAtt ApiServerContainerRepo.RepositoryUri
  ApiServerContainerRepoName:
    Description: Name of the ECR repo
    Value: !Ref ApiServerContainerRepo
  DbEndpointAddress:
    Description: Endpoint address of Postgres DB
    Value: !GetAtt Postgres.Endpoint.Address
  GitHubOIDCRoleArn:
    Description: ARN of the GitHub OIDC IdP role
    Value: !GetAtt GitHubOidcStack.Outputs.GitHubOIDCRoleArn
