AWSTemplateFormatVersion: "2010-09-09"
Description: Solarpunk Drifters - CDN with CloudFront

Parameters:
  # ====== Required ======
  ApiLoadBalancerDnsName:
    Description: DNS Name for API's public-facing load balancer
    Type: String
  CertificateArn:
    Description: ARN of ACM certificate
    Type: String
  CloudFrontDistroCname:
    Description: CNAME for CloudFront distro's alias (must be registered on Route53 before deploying this stack)
    Type: String
  EnvironmentPrefix:
    Description: String prefixed on various resource names to make them unique
    Type: String
  GitHubOIDCRoleArn:
    Description: ARN of IAM Role for GitHub OIDC
    Type: String
  StaticWebsiteS3BucketRootName:
    Description: Name of static website root bucket
    Type: String
  StaticWebsiteS3BucketRootArn:
    Description: ARN of static website root bucket
    Type: String
  StaticWebsiteS3BucketLogsDomainName:
    Description: Domain name of logs bucket
    Type: String
  StaticWebsiteS3BucketRootDomainName:
    Description: Domain name of root bucket
    Type: String
  # ====== Optional ======
  # (All are required)

Mappings:
  CloudFront:
    OriginNames:
      ApiOriginNameForCF: solarpunk-drifters-website-api
      S3StaticWebsiteOriginNameForCF: S3-solarpunk-drifters-website-root

Resources:
  # Give CloudFront distro permissions for this bucket
  StaticWebsiteS3BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref StaticWebsiteS3BucketRootName
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Sid: CloudFrontGetObject
            Action: s3:GetObject
            Principal:
              Service: "cloudfront.amazonaws.com"
            Effect: Allow
            Resource: !Sub "${StaticWebsiteS3BucketRootArn}/*"
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
          # ListBucket needs its own statement because the resource must not have trailing "/*"
          - Sid: CloudFrontListBucket
            Action: s3:ListBucket
            Principal:
              Service: "cloudfront.amazonaws.com"
            Effect: Allow
            Resource: !Ref StaticWebsiteS3BucketRootArn
            Condition:
              StringEquals:
                "AWS:SourceArn": !Sub "arn:${AWS::Partition}:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}"
          - Sid: GitHubOIDCSyncBucketObjects
            Effect: Allow
            Principal:
              AWS: !Ref GitHubOIDCRoleArn
            Action:
              - "s3:AbortMultipartUpload"
              - "s3:DeleteObject"
              - "s3:GetObject"
              - "s3:PutObject"
            Resource: !Sub "${StaticWebsiteS3BucketRootArn}/*"
          - Sid: GitHubOIDCSyncBucketType
            Effect: Allow
            Principal:
              AWS: !Ref GitHubOIDCRoleArn
            Action:
              - "s3:GetBucketLocation"
              - "s3:ListBucket"
              - "s3:ListBucketMultipartUploads"
            Resource: !Ref StaticWebsiteS3BucketRootArn

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Aliases:
          - !Ref CloudFrontDistroCname
        DefaultCacheBehavior:
          FunctionAssociations:
            - EventType: viewer-request
              FunctionARN: !Ref RewriteWebsiteUrisCloudFrontFn
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6 # Managed-CachingOptimized, for S3
          TargetOriginId:
            !FindInMap [CloudFront, OriginNames, S3StaticWebsiteOriginNameForCF]
          ViewerProtocolPolicy: redirect-to-https
          ResponseHeadersPolicyId: !Ref ResponseHeadersPolicy
        CacheBehaviors:
          - AllowedMethods: [GET, HEAD, OPTIONS, PUT, PATCH, POST, DELETE]
            CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # Managed-CachingDisabled
            OriginRequestPolicyId: 216adef6-5c7f-47e4-b989-5492eafa07d3 # Managed-AllViewer. NOTE: "Host" header must be forwarded for WebSockets to work.
            PathPattern: /api/*
            TargetOriginId:
              !FindInMap [CloudFront, OriginNames, ApiOriginNameForCF]
            ViewerProtocolPolicy: redirect-to-https
        CustomErrorResponses:
          - ErrorCachingMinTTL: 60
            ErrorCode: 404
            ResponseCode: 200
            # Redirect 404s to index.html
            # (TODO: If you redirect to 404.html, then trailing slash
            # like /somepage/ 404s instead of going to the rewrite uris fn)
            ResponsePagePath: "/404.html"
        # TODO: delete? never used
        #   - ErrorCachingMinTTL: 60
        #     ErrorCode: 403
        #     ResponseCode: 403
        #     ResponsePagePath: "/403.html"
        Enabled: true
        HttpVersion: http2
        DefaultRootObject: index.html
        IPV6Enabled: true
        Logging:
          Bucket: !Ref StaticWebsiteS3BucketLogsDomainName
          IncludeCookies: false
          Prefix: cloudfront-cdn/
        Origins:
          - DomainName: !Ref StaticWebsiteS3BucketRootDomainName
            Id:
              !FindInMap [
                CloudFront,
                OriginNames,
                S3StaticWebsiteOriginNameForCF,
              ]
            OriginAccessControlId: !Ref OriginAccessControl
            S3OriginConfig: {}
          - DomainName: !Ref ApiLoadBalancerDnsName
            Id: !FindInMap [CloudFront, OriginNames, ApiOriginNameForCF]
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        PriceClass: PriceClass_All
        ViewerCertificate:
          AcmCertificateArn: !Ref CertificateArn
          MinimumProtocolVersion: TLSv1.1_2016
          SslSupportMethod: sni-only

  RewriteWebsiteUrisCloudFrontFn:
    Type: AWS::CloudFront::Function
    Properties:
      AutoPublish: true
      FunctionCode: |
        function handler(event) {
          const request = event.request;
          if (request.uri === "/api" || request.uri.startsWith("/api/")) {
            // pass-thru, ignore API routes in this fn
            return request
          } else if (request.uri === "/") {
            // root
            request.uri = "/index.html";
          } else if (!request.uri.includes(".")) {
            // no file extension, eg "/somepage/otherpage" -> /somepage/otherpage.html
            request.uri += ".html";
          } else if (request.uri.endsWith(".html")) {
            // redirect to non-html URL
            const nonHtmlUrl = request.uri.slice(0, -5);
            return {
              statusCode: 301,
              headers: { location: { value: nonHtmlUrl } },
            };
          }

          return request;
        }
      FunctionConfig:
        Comment: Rewrite routes to S3 objects for the S3 static site
        Runtime: cloudfront-js-2.0
      Name: !Sub "${EnvironmentPrefix}-rewrite-website-uris"

  OriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Properties:
      OriginAccessControlConfig:
        # Get a unique ID for the OAC Config name.
        # Name must be unique within account
        Name: !Sub
          - amzn-secure-static-site-${guid}
          - guid: !Select [2, !Split ["/", !Ref "AWS::StackId"]]
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  ResponseHeadersPolicy:
    Type: AWS::CloudFront::ResponseHeadersPolicy
    Properties:
      ResponseHeadersPolicyConfig:
        Name: !Sub "${EnvironmentPrefix}-static-site-security-headers"
        SecurityHeadersConfig:
          StrictTransportSecurity:
            AccessControlMaxAgeSec: 63072000
            IncludeSubdomains: true
            Override: true
            Preload: true
          # ContentSecurityPolicy:
          #   ContentSecurityPolicy: "default-src 'none'; img-src 'self'; script-src 'self'; style-src 'self'; object-src 'none'"
          #   Override: true
          ContentTypeOptions:
            Override: true
          FrameOptions:
            FrameOption: DENY
            Override: true
          ReferrerPolicy:
            ReferrerPolicy: "same-origin"
            Override: true
          XSSProtection:
            ModeBlock: true
            Override: true
            Protection: true

Outputs:
  CloudFrontDistributionId:
    Description: CloudFront distribution ID
    Value: !GetAtt CloudFrontDistribution.Id
  CloudFrontDistributionDomain:
    Description: CloudFront distribution domain
    Value: !GetAtt CloudFrontDistribution.DomainName
