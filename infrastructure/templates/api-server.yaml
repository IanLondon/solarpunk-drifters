AWSTemplateFormatVersion: "2010-09-09"
Description: Solarpunk Drifters - API Server on ECS

Parameters:
  # ====== Required ======
  ApiServiceLogGroupName:
    Type: String
  ContainerImageUrl:
    Type: String
    Description: The url of a container image for the instances to run, eg "012345678910.dkr.ecr.<region-name>.amazonaws.com/<repository-name>@sha256:94afd1f2e64d908bc90dbca0035a5b567EXAMPLE"
  DbEndpointAddress:
    Type: String
    Description: Endpoint address of DB
  DbSecretArn:
    Type: String
    Description: ARN for DB credentials secret
  DbSecretKmsArn:
    Type: String
    Description: ARN for KMS key for DB credentials secret
  EnvironmentPrefix:
    Type: String
    Description: String prefixed on various resource names to make them unique
  PublicSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2Id:
    Type: AWS::EC2::Subnet::Id
  # TODO: consider
  # ALBSubnetIds:
  #   Type: List<AWS::EC2::Subnet::Id>
  PrivateSubnet1Id:
    Type: AWS::EC2::Subnet::Id
  VpcId:
    Type: AWS::EC2::VPC::Id
  # ====== Optional ======
  ApiContainerName:
    Type: String
    Default: api-server
    Description: The container name of the api-server container
  ApiContainerPort:
    Type: Number
    Default: 8080
    Description: A log group name for the API Service task
  ContainerCpu:
    Type: Number
    Default: 256
    Description: Number of CPU units for the service task instances (1024 is 1 vCPU, 256 is .25 vCPU).
  ContainerMemory:
    Type: Number
    Default: 512
    Description: Container memory in MiB.
  DesiredCount:
    Type: Number
    Default: 1
    Description: How many instances of the service task to place and keep running.
  HealthCheckPath:
    Type: String
    Default: /health
    Description: Path to perform the healthcheck on each instance.

Resources:
  ApiServiceLogGroup:
    Type: AWS::Logs::LogGroup
    DeletionPolicy: Delete
    UpdateReplacePolicy: Delete
    Properties:
      LogGroupName: !Ref ApiServiceLogGroupName
      RetentionInDays: 7

  ApiServiceTaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      ContainerDefinitions:
        - Image: !Ref ContainerImageUrl
          Name: !Ref ApiContainerName
          Essential: true
          PortMappings:
            - ContainerPort: !Ref ApiContainerPort
          Environment:
            - Name: DB_USE_SSL
              Value: "1"
            - Name: PORT
              Value: "8080"
            - Name: PGDATABASE
              Value: postgres
            - Name: PGHOST
              Value: !Ref DbEndpointAddress
            - Name: PGPORT
              Value: "5432"
            - Name: SESSION_SECRET
              Value: session-secret-123 # TODO use real secret with SM
          Secrets:
            - ValueFrom: !Sub "${DbSecretArn}:password::"
              Name: PGPASSWORD
            - ValueFrom: !Sub "${DbSecretArn}:username::"
              Name: PGUSER
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref ApiServiceLogGroupName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs
      Cpu: !Ref ContainerCpu
      Family: !Sub "${EnvironmentPrefix}-solarpunk-drifters-api-service"
      Memory: !Ref ContainerMemory
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - "FARGATE"
      ExecutionRoleArn: !GetAtt ECSTaskExecutionRole.Arn

  ECSTaskExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
          # Allow the Fargate agent to download images and upload logs.
          - Effect: Allow
            Principal:
              Service: [ecs-tasks.amazonaws.com]
            Action: ["sts:AssumeRole"]
            Condition:
              ArnLike:
                aws:SourceArn: !Sub arn:${AWS::Partition}:ecs:${AWS::Region}:${AWS::AccountId}:*
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
      Path: /
      # This role enables basic features of ECS. See reference:
      # https://docs.aws.amazon.com/AmazonECS/latest/developerguide/security-iam-awsmanpol.html#security-iam-awsmanpol-AmazonECSTaskExecutionRolePolicy
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-${EnvironmentPrefix}-inline"
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  # - "ssm:GetParameters"
                  - "secretsmanager:GetSecretValue"
                  - "kms:Decrypt"
                Resource:
                  # - !Sub "arn:${AWS::Partition}:ssm:${AWS::Region}:${AWS::AccountId}:parameter/parameter_name"
                  # - !Sub "arn:${AWS::Partition}:secretsmanager:${AWS::Region}:${AWS::AccountId}:secret:${DbSecretName}"
                  - !Ref DbSecretArn
                  # - !Sub "arn:${AWS::Partition}:kms:${AWS::Region}:${AWS::AccountId}:key/${DbSecretKmsKey}"
                  - !Ref DbSecretKmsArn

  ApiServerCluster:
    Type: AWS::ECS::Cluster

  ApiService:
    Type: AWS::ECS::Service
    DependsOn: PublicLoadBalancerListener
    Properties:
      LaunchType: FARGATE
      Cluster: !Ref ApiServerCluster
      DesiredCount: !Ref DesiredCount
      NetworkConfiguration:
        AwsvpcConfiguration:
          AssignPublicIp: DISABLED
          SecurityGroups:
            - !Ref ServiceSecurityGroup
          Subnets:
            - !Ref PrivateSubnet1Id
      TaskDefinition: !Ref ApiServiceTaskDefinition
      LoadBalancers:
        - ContainerName: !Ref ApiContainerName
          ContainerPort: !Ref ApiContainerPort
          TargetGroupArn: !Ref ServiceTargetGroup

  ServiceTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: !Ref HealthCheckPath
      HealthCheckPort: !Ref ApiContainerPort
      HealthCheckProtocol: HTTP
      HealthyThresholdCount: 5
      Port: !Ref ApiContainerPort
      Protocol: HTTP
      # TargetGroupAttributes:
      #   - Key: deregistration_delay.timeout_seconds
      #     Value: 300
      TargetType: ip
      UnhealthyThresholdCount: 2
      VpcId: !Ref VpcId

  PublicLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: "30"
      Subnets:
        - !Ref PublicSubnet1Id
        - !Ref PublicSubnet2Id
      SecurityGroups:
        - !Ref PublicLoadBalancerSecurityGroup
  PublicLoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: "forward"
          ForwardConfig:
            TargetGroups:
              - TargetGroupArn: !Ref ServiceTargetGroup
                Weight: 100
      LoadBalancerArn: !Ref PublicLoadBalancer
      Port: 80
      Protocol: HTTP

  # === SECURITY GROUPS ===============================================

  ServiceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the api-server ECS containers
      VpcId: !Ref VpcId
  # Open up the ECS service's security group to traffic originating
  # from the security group of the load balancer.
  ServiceIngressfromLoadBalancer:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      Description: Ingress from the public ALB
      GroupId: !Ref ServiceSecurityGroup
      IpProtocol: -1 # all protocols. TODO: restrict
      SourceSecurityGroupId: !Ref PublicLoadBalancerSecurityGroup

  PublicLoadBalancerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Access to the public-facing load balancer
      VpcId: !Ref VpcId
      SecurityGroupIngress:
        # Allow access to public facing ALB from any IP address
        - CidrIp: 0.0.0.0/0
          IpProtocol: -1 # all protocols. TODO: HTTP(S) only?

Outputs:
  ApiLoadBalancerDnsName:
    Description: DNS name of public-facing load balancer
    Value: !GetAtt PublicLoadBalancer.DNSName
  ApiServiceLogGroupArn:
    Description: Log group of API service task
    Value: !GetAtt ApiServiceLogGroup.Arn
  ServiceSecurityGroup:
    Description: Security group for ECS containers
    Value: !Ref ServiceSecurityGroup
